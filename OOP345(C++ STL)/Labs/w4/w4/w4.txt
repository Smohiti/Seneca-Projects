Script started on Wed 08 Feb 2017 01:08:18 PM EST
msmohiti@matrix:~/OOP345/w4> whoami
msmohiti
msmohiti@matrix:~/OOP345/w4> cat w4.cpp KVList.h 
// Workshop 4 - Templates
// w4.cpp
//M.Saeed Mohiti
#include <iostream>
#include <iomanip>
#include <string>
#include "KVList.h"

template <typename K, typename V, int N>
void display(const std::string& msg, const KVList<K, V, N>& list, int w) {
	std::cout << msg;
	for (int i = 0; i < list.size(); i++)
		std::cout << std::setw(w) << list.key(i)
		<< " : " << list.value(i) << std::endl;
}

int main(int argc, char** argv) {
	if (argc != 1) {
		std::cerr << argv[0] << ": too many arguments\n";
		return 1;
	}

	int width;
	bool keepreading;
	std::cout << std::fixed << std::setprecision(2);

	std::cout << "\nInventory\n=========\n";
	KVList <std::string, double, 5> inventory;
	std::string str;
	double price;

	keepreading = true;
	do {
		std::cout << "Product : ";
		getline(std::cin, str);
		if (str.compare("quit") == 0) {
			keepreading = false;
		}
		else {
			std::cout << "Price : ";
			std::cin >> price;
			std::cin.ignore();
			inventory.add(str, price);
		}
	} while (keepreading);
	display("\nPrice List\n----------\n", inventory, 13);

	std::cout << "\nCorrections\n-----------\n";
	keepreading = true;
	do {
		std::cout << "Product : ";
		getline(std::cin, str);
		if (str.compare("quit") == 0) {
			keepreading = false;
		}
		else {
			int i = inventory.find(str);
			if (i != -1) {
				std::cout << "Price : ";
				std::cin >> price;
				std::cin.ignore();
				inventory.replace(i, str, price);
			}
		}
	} while (keepreading);
	display("\nPrice List\n----------\n", inventory, 13);

	std::cout << "\nGlossary\n========\n";
	KVList <std::string, std::string, 5> glossary;
	std::string key, definition;

	keepreading = true;
	do {
		std::cout << "Key : ";
		getline(std::cin, key);
		if (key.compare("quit") == 0) {
			keepreading = false;
		}
		else {
			std::cout << "Definition : ";
			getline(std::cin, definition);
			glossary.add(key, definition);
		}
	} while (keepreading);
	display("\nEntries\n-------\n", glossary, 5);
}// workshop 4
//M.Saeed Mohiti
#pragma once
#define CLIENT
template < typename K, typename V, int SIZE>

class KVList {
	K k[SIZE];
	V v[SIZE];
	size_t tablesize;
public:
	KVList(): tablesize(0) {

	}// default constructor - adopts a safe empty state
	size_t size() const {
		return tablesize;
	} //returns the number of entires in the key - value list
	const K& key(int i) const {
		//if (i >= 0; i < tablesize;)
			return k[i];
	}// returns an unmodifiable reference to the key of element i in the list
	const V& value(int i) const {
		//if (i >= 0; i < tablesize;)
			return v[i];	
	}
	// returns an unmodifiable reference to the value of element i in the list
	KVList& add(const K& kk, const V& vv) {
		if (tablesize < SIZE) {
			k[tablesize] = kk;
			v[tablesize] = vv;
			tablesize++;
		}
		return *this;
	} //adds a new element to the list if room exists and returns a reference to the current object, does nothing if no room exists
	int find(const K& kk) const {
		for (size_t i = 0; i, tablesize; i++)
			if (k[i]==kk)
				return i;
		return 0;
	} // returns the index of the first element in the list with a key equal to k - defaults to 0
	KVList& replace(int i, const K& kk, const V& vv) {
		if (i >= 0 && i < tablesize) {
			k[i] = kk;
			v[i] = vv;
		}
		return *this;
	} //replaces element i in the list with the key and value received and returns a reference to the current object
}; // calss KVListmsmohiti@matrix:~/OOP345/w4> g++ -o w4 w4.cpp
msmohiti@matrix:~/OOP345/w4> w4

Inventory
=========
Product : Pizza
Price : 4.49
Product : Pierogi
Price : 2.56
Product : Ptato Chips
Price : 2.29
Product : Black Tea
Price : 4.49
Product : Green Tea
Price : 3.46
Product : Fruit Tea
Price : 2.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
  Ptato Chips : 2.29
    Black Tea : 4.49
    Green Tea : 3.46

Corrections
-----------
Product : Black Tea
Price : 5.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
  Ptato Chips : 2.29
    Black Tea : 5.29
    Green Tea : 3.46

Glossary
========
Key : CPU
Definition : central processing unit
Key : ALU
Definition : arithmetic logic unit
Key : quit

Entries
-------
  CPU : central processing unit
  ALU : arithmetic logic unit
msmohiti@matrix:~/OOP345/w4> exit
exit

Script done on Wed 08 Feb 2017 01:11:24 PM EST
